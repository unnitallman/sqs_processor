#!/usr/bin/env ruby

require 'sqs_processor'
require 'optparse'

def parse_options
  options = {
    queue_url: nil,
    region: nil,
    max_messages: 10,
    visibility_timeout: 30
  }

  OptionParser.new do |opts|
    opts.banner = 'Usage: sqs_processor [options]'

    opts.on('-q', '--queue-url URL', 'SQS Queue URL') do |url|
      options[:queue_url] = url
    end

    opts.on('-r', '--region REGION', 'AWS Region') do |region|
      options[:region] = region
    end

    opts.on('-m', '--max-messages NUMBER', Integer, 'Max messages per batch (default: 10)') do |num|
      options[:max_messages] = num
    end

    opts.on('-v', '--visibility-timeout SECONDS', Integer, 'Visibility timeout in seconds (default: 30)') do |timeout|
      options[:visibility_timeout] = timeout
    end

    opts.on('-h', '--help', 'Show this help message') do
      puts opts
      exit
    end
  end.parse!

  options
end

if __FILE__ == $0
  options = parse_options

  begin
    # Load environment variables
    Dotenv.load

    # Get queue URL from options or environment
    queue_url = options[:queue_url] || ENV.fetch('DATA_SYNC_SQS_QUEUE_URL', nil)

    unless queue_url
      puts 'Error: Queue URL is required. Set DATA_SYNC_SQS_QUEUE_URL environment variable or use -q option.'
      exit 1
    end

    processor = SQSProcessor::Processor.new(
      queue_url: queue_url,
      region: options[:region] || ENV['DATA_SYNC_AWS_REGION'] || 'us-east-1',
      max_messages: options[:max_messages],
      visibility_timeout: options[:visibility_timeout],
      aws_access_key_id: ENV.fetch('DATA_SYNC_AWS_ACCESS_KEY_ID', nil),
      aws_secret_access_key: ENV.fetch('DATA_SYNC_AWS_SECRET_ACCESS_KEY', nil),
      aws_session_token: ENV.fetch('DATA_SYNC_AWS_SESSION_TOKEN', nil)
    )

    # Show queue attributes before starting
    processor.get_queue_attributes

    # Start processing messages
    processor.process_messages
  rescue StandardError => e
    puts "Error: #{e.message}"
    puts e.backtrace.join("\n")
    exit 1
  end
end
